/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clinicaveterinaria.vistas;

import clinicaveterinaria.entidades.Mascota;
import clinicaveterinaria.entidades.Cliente;
import accesoDatos.ClienteData;
import accesoDatos.MascotaData;
import java.sql.Date;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.EventListener;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author borch
 */
public class FormularioMascota extends javax.swing.JFrame {

    private MascotaData mascotaData;
    private ClienteData clienteData;
    private Mascota mascota;
    private Cliente cliente;
    
    private int idCliente;
    
    private List<MascotaEventListener> listeners = new ArrayList<>();

    public void addMascotaEventListener(MascotaEventListener listener) {
        listeners.add(listener);
    }

    private void notificarActualizacionMascota() {
        for (MascotaEventListener listener : listeners) {
            listener.mascotaActualizado();
        }
    }
    
    /**
     * Creates new form FormularioMascota
     */
    public FormularioMascota() {
        initComponents();
        
        mascotaData = new MascotaData();
        clienteData = new ClienteData();
        mascota = new Mascota();
        cliente = new Cliente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtAlias = new javax.swing.JTextField();
        txtRaza = new javax.swing.JTextField();
        txtEspecie = new javax.swing.JTextField();
        txtColor = new javax.swing.JTextField();
        txtDniCliente = new javax.swing.JTextField();
        dateNacimiento = new com.toedter.calendar.JDateChooser();
        buttonGuardar = new javax.swing.JButton();
        buttonCancelar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtSexo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Clinica Veterinaria-Formulario paciente");
        setMaximumSize(null);
        setMinimumSize(null);
        setResizable(false);

        jLabel1.setText("Alias: ");

        jLabel2.setText("Raza:");

        jLabel3.setText("Especie:");

        jLabel4.setText("Color:");

        jLabel5.setText("Documento due√±o:");

        jLabel6.setText("Fecha nacimiento:");

        buttonGuardar.setText("Guardar");
        buttonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuardarActionPerformed(evt);
            }
        });

        buttonCancelar.setText("Cancelar");
        buttonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarActionPerformed(evt);
            }
        });

        jLabel7.setText("Sexo:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel7))
                                    .addGap(47, 47, 47))
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(dateNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                        .addComponent(txtEspecie)
                                        .addComponent(txtRaza)
                                        .addComponent(txtColor)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(txtAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(txtSexo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(buttonCancelar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonGuardar))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(28, 28, 28)
                            .addComponent(txtDniCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDniCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txtEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonGuardar)
                    .addComponent(buttonCancelar))
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuardarActionPerformed
        String dniClienteText = txtDniCliente.getText().trim();
        if (!dniClienteText.isEmpty()) {
            int dniCliente = Integer.parseInt(dniClienteText);
            idCliente = clienteData.obtenerIdClientePorDNI( dniCliente);
            
            if (idCliente > 0) {

                String alias = txtAlias.getText().trim();
                String sexo = txtSexo.getText().trim();
                String especie = txtEspecie.getText().trim();
                String raza = txtRaza.getText().trim();
                String color = txtColor.getText().trim();
                LocalDate nacimiento = dateNacimiento.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        
        if (alias.isEmpty() || sexo.isEmpty() || especie.isEmpty() || raza.isEmpty()|| color.isEmpty() || nacimiento== null){
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
             if (esMascotaNueva()) {
            Mascota masc = new Mascota(alias, sexo, especie, raza, color, nacimiento);
                    mascotaData.altaMascota(masc, idCliente);
                } else {
                    mascota.setAlias(alias);
                    mascota.setSexo(sexo);
                    mascota.setEspecie(especie);
                    mascota.setRaza(raza);
                    mascota.setColor(color);
                    mascota.setNacimiento(nacimiento);

                    mascotaData.modificarMascota(mascota);
                }
                notificarActualizacionMascota();
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "El DNI del cliente no existe en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, complete el campo 'Documento due√±o'.", "Error", JOptionPane.ERROR_MESSAGE);
    
    }//GEN-LAST:event_buttonGuardarActionPerformed
    }
    
    private void buttonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelarActionPerformed
            
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancelar;
    private javax.swing.JButton buttonGuardar;
    private com.toedter.calendar.JDateChooser dateNacimiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField txtAlias;
    private javax.swing.JTextField txtColor;
    private javax.swing.JTextField txtDniCliente;
    private javax.swing.JTextField txtEspecie;
    private javax.swing.JTextField txtRaza;
    private javax.swing.JTextField txtSexo;
    // End of variables declaration//GEN-END:variables
   
    public void limpiarCampos() {
        txtAlias.setText("");
        txtSexo.setText("");
        txtEspecie.setText("");
        txtRaza.setText("");
        txtColor.setText("");
        dateNacimiento.setDate(null);
    }
    
    public boolean esMascotaNueva() {
        String alias = txtAlias.getText().trim();
        if (alias.isEmpty() || idCliente < 0) {
            return true;
        }

        // Buscar la mascota por alias y el ID del cliente.
        Mascota mascotaExistente = mascotaData.buscarMascotaPorAlias(alias, idCliente);

        // Si la mascota no existe o pertenece al cliente actual, se considera nueva.
        return mascotaExistente == null || mascotaExistente.getIdCliente() == idCliente;
        }
    
    // M√©todo para cargar datos desde la tabla a los campos del formulario
    public void cargarDatosDesdeTabla(DefaultTableModel tablaListaMascota, int filaSeleccionada) {
        String alias = (String) tablaListaMascota.getValueAt(filaSeleccionada, 0);
        String sexo = (String) tablaListaMascota.getValueAt(filaSeleccionada, 1);
        String especie = (String) tablaListaMascota.getValueAt(filaSeleccionada, 2);
        String raza = (String) tablaListaMascota.getValueAt(filaSeleccionada, 3);
        String color = (String) tablaListaMascota.getValueAt(filaSeleccionada, 4);
        Date nacimiento = ((Date) tablaListaMascota.getValueAt(filaSeleccionada, 5));
        
        txtAlias.setText(alias);
        txtSexo.setText(sexo);
        txtEspecie.setText(especie);
        txtRaza.setText(raza);
        txtColor.setText(color);
        dateNacimiento.setDate(nacimiento);
    }   
    
    public interface MascotaEventListener extends EventListener{
        void mascotaActualizado();
    }
}
    

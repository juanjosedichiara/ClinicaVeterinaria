/*
 * CONECTAR CON INTERNAL FRAME DE VETERINARIO.
 * ACA SE DEBE AGREGAR LOS CODIGOS DE:
 * BAJA - ALTA - MODIFICAR MASCOTAS.
 */
package clinicaveterinaria.vistas;

import javax.swing.JDesktopPane;

import accesoDatos.ClienteData;
import accesoDatos.MascotaData;

import clinicaveterinaria.entidades.Cliente;
import clinicaveterinaria.entidades.Mascota;
import java.awt.BorderLayout;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author borch
 */
public class FormularioPacientes extends javax.swing.JInternalFrame {

    
    ClienteData clienteData = new ClienteData();
    MascotaData mascotaData = new MascotaData();
    
    /**
     * 
     *Creates new form FormularioPacientes
     * @param desktopHome
     */
    public FormularioPacientes(JDesktopPane desktopHome) {
        initComponents();
        FormularioPacientes formulario = new FormularioPacientes(desktopHome);

    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        buttonEliminar = new javax.swing.JButton();
        buttonGuardar = new javax.swing.JButton();
        txtDNICliente = new javax.swing.JTextField();
        fieldAlias = new javax.swing.JTextField();
        fieldSexo = new javax.swing.JTextField();
        fieldEspecie = new javax.swing.JTextField();
        fieldRaza = new javax.swing.JTextField();
        fieldColor = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dateFechaNacimiento = new com.toedter.calendar.JDateChooser();

        setPreferredSize(new java.awt.Dimension(400, 400));

        jLabel1.setText("Documento cliente: ");

        jLabel2.setText("sexo: ");

        jLabel3.setText("Alias: ");

        jLabel4.setText("Especie: ");

        jLabel5.setText("Raza: ");

        jLabel6.setText("Color: ");

        buttonEliminar.setText("Eliminar");
        buttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEliminarActionPerformed(evt);
            }
        });

        buttonGuardar.setText("Guardar");
        buttonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuardarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI Symbol", 1, 11)); // NOI18N
        jLabel7.setText("FORMULARIO PACIENTES");

        jLabel8.setText("Fecha nacimiento: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(jLabel7)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(txtDNICliente, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(dateFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(fieldAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(fieldEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(fieldColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fieldRaza, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fieldSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(52, 52, 52))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonGuardar)
                        .addGap(54, 54, 54))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel7)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDNICliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(fieldSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(fieldRaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(dateFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEliminar)
                    .addComponent(buttonGuardar))
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    //Conectar en metodo alta y modificar mascota.. 
    private void buttonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuardarActionPerformed
        
        try {
            String dniClienteText = txtDNICliente.getText();
            String alias = fieldAlias.getText();
            String sexo = fieldSexo.getText();
            String especie = fieldEspecie.getText();
            String raza = fieldRaza.getText();
            String color = fieldColor.getText();
            LocalDate fechaNacimiento = dateFechaNacimiento.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

            if (dniClienteText.isEmpty() || alias.isEmpty() || sexo.isEmpty() || especie.isEmpty() || raza.isEmpty() || color.isEmpty() || fechaNacimiento == null) {
                JOptionPane.showMessageDialog(this, "No pueden haber campos vacios");
                return;
            }

            int dniCliente = Integer.parseInt(dniClienteText);
            Cliente cliente = clienteData.consultarClientesPorDNI(dniCliente);
            
            // Verificar si el cliente existe
            if (cliente != null) {
                Mascota mascotaExistente = null;
                List<Mascota> mascotas = mascotaData.obtenerMascotasPorIdCliente(cliente.getIdCliente());

                for (Mascota mascota : mascotas) {
                    if (mascota.getAlias().equalsIgnoreCase(alias)) {
                        mascotaExistente = mascota;
                        break;
                    }
                }

            if (mascotaExistente != null) {
                int respuesta = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea modificar los datos de la mascota?\n\n"
                        + "Cliente: " + cliente.getNombre() + " " + cliente.getApellido() + "\n"
                        + "Alias anterior: " + mascotaExistente.getAlias() + "\n"
                        + "Alias nuevo: " + alias + "\n"
                        + "Sexo anterior: " + mascotaExistente.getSexo() + "\n"
                        + "Sexo nuevo: " + sexo + "\n"
                        + "Especie anterior: " + mascotaExistente.getEspecie() + "\n"
                        + "Especie nueva: " + especie + "\n"
                        + "Raza anterior: " + mascotaExistente.getRaza() + "\n"
                        + "Raza nueva: " + raza + "\n"
                        + "Color anterior: " + mascotaExistente.getColor() + "\n"
                        + "Color nuevo: " + color + "\n"
                        + "Fecha de Nacimiento anterior: " + mascotaExistente.getNacimiento() + "\n"
                        + "Fecha de Nacimiento nuevo: " + fechaNacimiento, "Confirmar Modificación", JOptionPane.YES_NO_OPTION);

                if (respuesta == JOptionPane.YES_OPTION) {
                    mascotaExistente.setAlias(alias);
                    mascotaExistente.setSexo(sexo);
                    mascotaExistente.setEspecie(especie);
                    mascotaExistente.setRaza(raza);
                    mascotaExistente.setColor(color);
                    mascotaExistente.setNacimiento(fechaNacimiento);

                    mascotaData.modificarMascota(mascotaExistente);
                    JOptionPane.showMessageDialog(this, "Mascota modificada exitosamente");
                }
            } else {    
                int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea guardar una nueva mascota?\n\n"
                        + "Cliente: " + cliente.getNombre() + " " + cliente.getApellido() + "\n"
                        + "Alias: " + alias + "\n"
                        + "Sexo: " + sexo + "\n"
                        + "Especie: " + especie + "\n"
                        + "Raza: " + raza + "\n"
                        + "Color: " + color + "\n"
                        + "Fecha de Nacimiento: " + fechaNacimiento, "Confirmar Guardar", JOptionPane.YES_NO_OPTION);

                if (respuesta == JOptionPane.YES_OPTION) {
                    Mascota nuevaMascota = new Mascota(0,cliente.getIdCliente(), alias, sexo, especie, raza, color,   fechaNacimiento,0.0,0.0,true);
                    mascotaData.altaMascota(nuevaMascota, cliente);

                    limpiarCampos();
                   
                    JOptionPane.showMessageDialog(this, "Mascota guardada exitosamente");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Cliente no encontrado. Asegúrate de crear el cliente previamente.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "Debe ingresar un DNI válido");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Ocurrió un error al procesar la solicitud: " + e.getMessage());
    }

        // Limpio los campos de texto:
        limpiarCampos();

    }//GEN-LAST:event_buttonGuardarActionPerformed

    
    //Conectar metodo eliminar mascota..
    private void buttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEliminarActionPerformed
        // Obtener el documento del cliente y el alias de la mascota ingresados
    String documentoCliente = txtDNICliente.getText();
    String aliasMascota = fieldAlias.getText();

    // Verificar que ambos campos estén completos
    if (!documentoCliente.isEmpty() && !aliasMascota.isEmpty()) {
        // Buscar el cliente por documento
        Cliente cliente = clienteData.consultarClientesPorDNI(Integer.parseInt(documentoCliente));

            // Verificar que el cliente exista
            if (cliente != null) {
                // Buscar la mascota por alias e ID del cliente
                List<Mascota> mascotas = mascotaData.obtenerMascotasPorIdCliente(cliente.getIdCliente());
                Mascota mascotaAEliminar = null;
                for (Mascota mascota : mascotas) {
                    if (mascota.getAlias().equalsIgnoreCase(aliasMascota)) {
                        mascotaAEliminar = mascota;
                        break;
                    }
                }

                if (mascotaAEliminar != null) {
                    // Mostrar un cuadro de diálogo de confirmación
                    int opcion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de eliminar esta mascota?\n\n"
                            + "Cliente: " + cliente.getNombre() + " " + cliente.getApellido() + "\n"
                            + "Mascota: " + mascotaAEliminar.getAlias(), "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

                    if (opcion == JOptionPane.YES_OPTION) {
                        // Eliminar la mascota de la base de datos
                        mascotaData.eliminarMascota(mascotaAEliminar.getIdMascota());
                        JOptionPane.showMessageDialog(this, "La mascota ha sido eliminada exitosamente.");
                        // Llama al método para limpiar los campos
                        limpiarCampos();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Mascota no encontrada para el cliente especificado.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Cliente no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debes completar ambos campos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_buttonEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEliminar;
    private javax.swing.JButton buttonGuardar;
    private com.toedter.calendar.JDateChooser dateFechaNacimiento;
    private javax.swing.JTextField fieldAlias;
    private javax.swing.JTextField fieldColor;
    private javax.swing.JTextField fieldEspecie;
    private javax.swing.JTextField fieldRaza;
    private javax.swing.JTextField fieldSexo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField txtDNICliente;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
    txtDNICliente.setText("");
    fieldAlias.setText("");
    fieldSexo.setText("");
    fieldEspecie.setText("");
    fieldRaza.setText("");
    fieldColor.setText("");
    dateFechaNacimiento.setDate(null);
    }

}
